{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Fente ITs knowledge sharing site On this site, I document my learning journey for a variety of reasons. Primarily, it helps me reflect on and retain what I've learned. But there are several additional benefits to documenting: To help others : By sharing what I learn, I hope to make it easier for others to benefit from my experience. To reinforce my understanding : Writing down what I've learned helps me retain the information more effectively. To spark new ideas : The process of documenting often leads to new insights and raises fresh questions. To validate my knowledge : Documenting forces me to check if I truly grasp the concepts I\u2019m working with. To improve efficiency : I can quickly reference past solutions and workflows, saving time when facing similar challenges in the future.","title":"Welcome to Fente ITs knowledge sharing site"},{"location":"#welcome-to-fente-its-knowledge-sharing-site","text":"On this site, I document my learning journey for a variety of reasons. Primarily, it helps me reflect on and retain what I've learned. But there are several additional benefits to documenting: To help others : By sharing what I learn, I hope to make it easier for others to benefit from my experience. To reinforce my understanding : Writing down what I've learned helps me retain the information more effectively. To spark new ideas : The process of documenting often leads to new insights and raises fresh questions. To validate my knowledge : Documenting forces me to check if I truly grasp the concepts I\u2019m working with. To improve efficiency : I can quickly reference past solutions and workflows, saving time when facing similar challenges in the future.","title":"Welcome to Fente ITs knowledge sharing site"},{"location":"about/","text":"This site is created and maintained by Jenny, developer and owner of Fente It . The sites code repository can be found on Fente It github .","title":"About"},{"location":"tutorials/development/deploy-static-html-to-azure-static-app/","text":"Deploy static html site to Azure static web app Description This tutorial is a step-by-step guide for deploy static web application where advanced build and deploy pipeline is not needed. It describes the steps of deploying your static files to an Azure Static Web App . The build and deploy pipeline can be added when needed, typically several developers working on same repository doing rapid changes (this is agility). Prerequisites Azure CLI: Installing the Azure CLI: Download the installer from the Azure CLI Installation page for Windows . VS Code Node Guidelines from Microsoft Learn Azure Static Web Apps Steps 1 Install SWA (Static Web Application) CLI In VS Code open the terminal and change the folder to the web application. Install CLI for the static web app using node. Note For local installation the parameter -g can be skipped npm install -g @azure/static-web-apps-cli 2 Build artifacts If the application is an React, Vue or Anglar application it should be prepared for deployment. Meaning transforming code into browser-compatible JavaScript, optimizing minimizing files etc. For example a React application will generate the site in the build folder when running npm run build 3 Create the Azure Static Web App You can create the Azure Static Web App using Azure Portal or form VS Code 4 Deploy to Azure using SWA CLI Login to your azure subscription /** Using az CLI **/ az login /** or Using swa ClI **/ swa login Deploy to the Azure static web app swa deploy <folder to deploy> --app-name <name of the static web app> --resource-group <the static web app resource group> --env <environment> Overview of command arguments swa deploy | Static Web Apps CLI Sample swa deploy ./build --app-name fente-homepage --resource-group fente-homepage-rg --env production","title":"Deploy static html site to Azure static web app"},{"location":"tutorials/development/deploy-static-html-to-azure-static-app/#deploy-static-html-site-to-azure-static-web-app","text":"","title":"Deploy static html site to Azure static web app"},{"location":"tutorials/development/deploy-static-html-to-azure-static-app/#description","text":"This tutorial is a step-by-step guide for deploy static web application where advanced build and deploy pipeline is not needed. It describes the steps of deploying your static files to an Azure Static Web App . The build and deploy pipeline can be added when needed, typically several developers working on same repository doing rapid changes (this is agility).","title":"Description"},{"location":"tutorials/development/deploy-static-html-to-azure-static-app/#prerequisites","text":"Azure CLI: Installing the Azure CLI: Download the installer from the Azure CLI Installation page for Windows . VS Code Node","title":"Prerequisites"},{"location":"tutorials/development/deploy-static-html-to-azure-static-app/#guidelines-from-microsoft","text":"Learn Azure Static Web Apps","title":"Guidelines from Microsoft"},{"location":"tutorials/development/deploy-static-html-to-azure-static-app/#steps","text":"","title":"Steps"},{"location":"tutorials/development/deploy-static-html-to-azure-static-app/#1-install-swa-static-web-application-cli","text":"In VS Code open the terminal and change the folder to the web application. Install CLI for the static web app using node. Note For local installation the parameter -g can be skipped npm install -g @azure/static-web-apps-cli","title":"1 Install SWA (Static Web Application) CLI"},{"location":"tutorials/development/deploy-static-html-to-azure-static-app/#2-build-artifacts","text":"If the application is an React, Vue or Anglar application it should be prepared for deployment. Meaning transforming code into browser-compatible JavaScript, optimizing minimizing files etc. For example a React application will generate the site in the build folder when running npm run build","title":"2 Build artifacts"},{"location":"tutorials/development/deploy-static-html-to-azure-static-app/#3-create-the-azure-static-web-app","text":"You can create the Azure Static Web App using Azure Portal or form VS Code","title":"3 Create the Azure Static Web App"},{"location":"tutorials/development/deploy-static-html-to-azure-static-app/#4-deploy-to-azure-using-swa-cli","text":"","title":"4 Deploy to Azure using SWA CLI"},{"location":"tutorials/development/deploy-static-html-to-azure-static-app/#login-to-your-azure-subscription","text":"/** Using az CLI **/ az login /** or Using swa ClI **/ swa login","title":"Login to your azure subscription"},{"location":"tutorials/development/deploy-static-html-to-azure-static-app/#deploy-to-the-azure-static-web-app","text":"swa deploy <folder to deploy> --app-name <name of the static web app> --resource-group <the static web app resource group> --env <environment> Overview of command arguments swa deploy | Static Web Apps CLI Sample swa deploy ./build --app-name fente-homepage --resource-group fente-homepage-rg --env production","title":"Deploy to the Azure static web app"},{"location":"tutorials/development/use-md-with-mkdocs-to-document/","text":"Use markdown and Mkdocs for documentation MkDocs is a powerful tool that generates static HTML sites from Markdown files. If you want developers to document their work effectively, it's important to keep the documentation close to the code. Markdown is a natural fit for this purpose, as it integrates seamlessly with code repositories. To learn more, visit mkdocs.org Prerequisite Phyton is required. Python can be installed using: Chocolatey (on Windows) Homebrew (on macOS) APT (on Linux) Python's official installer (from Welcome to Python.org ) Note! This guide works on Windows. Both Powershell and Gitbash can be used as commandline tool. Steps The repository of the sample application refered to in the tutorial can be found here . 1 Install Mkdocs Open the commandline tool (Powershell or GitBash) and use Pythons package manager, pip, to install mkdocs. $ pip install mkdocs 2 Create site MkDocs should now be in the windows path. If not, it can be found in the python installation For example in the folder C:\\Python312\\Scripts Create documentation site: $ mkdocs new <name of documentation> Sample Host the documentation locally: $ mkdocs serve The serve will build (meaning generate the html and js files) and run a local host. 3 Change the style (optional) Add a custom css file and change the mkdocs.yml file 4 Build the site Before you deploy you need to build the site so that it can generate html and javascript sites. $ mkdocs build The html and javascript files will be generated in a site folder as shown below. It is the site folder that should be deployd to the preferred host. Site 5 Deploy the site There are several ways to host the site. Below describes how to deploy to a GitHub Page and Azure Static Web App. Note that this is done manually using command line interface (CLI). The next step is to integrate this in a CI/CD pipeline. Note : The markdown files should be kept in a versioncontrol repository like GitHub or Azure DevOps to keep track of history . 4.1 Deploy to a GitHub Page The simplest way is to deploy to a GitHub Page . You need to have an existing git repository. Create a repository in GitHub and follow the guideling on GitHub to initialize the local repository with the GitHub repository. $ mkdocs gh-deploy The deploy will generate a new branch called gh-pages and deploy to a GitHub site. Sample in mkdocs-learning 4.2 Deploy to Azure Static Web App Howto deploy files to Azure Static Web App is explained here","title":"Use markdown and Mkdocs for documentation"},{"location":"tutorials/development/use-md-with-mkdocs-to-document/#use-markdown-and-mkdocs-for-documentation","text":"MkDocs is a powerful tool that generates static HTML sites from Markdown files. If you want developers to document their work effectively, it's important to keep the documentation close to the code. Markdown is a natural fit for this purpose, as it integrates seamlessly with code repositories. To learn more, visit mkdocs.org","title":"Use markdown and Mkdocs for documentation"},{"location":"tutorials/development/use-md-with-mkdocs-to-document/#prerequisite","text":"Phyton is required. Python can be installed using: Chocolatey (on Windows) Homebrew (on macOS) APT (on Linux) Python's official installer (from Welcome to Python.org ) Note! This guide works on Windows. Both Powershell and Gitbash can be used as commandline tool.","title":"Prerequisite"},{"location":"tutorials/development/use-md-with-mkdocs-to-document/#steps","text":"The repository of the sample application refered to in the tutorial can be found here .","title":"Steps"},{"location":"tutorials/development/use-md-with-mkdocs-to-document/#1-install-mkdocs","text":"Open the commandline tool (Powershell or GitBash) and use Pythons package manager, pip, to install mkdocs. $ pip install mkdocs","title":"1 Install Mkdocs"},{"location":"tutorials/development/use-md-with-mkdocs-to-document/#2-create-site","text":"MkDocs should now be in the windows path. If not, it can be found in the python installation For example in the folder C:\\Python312\\Scripts Create documentation site: $ mkdocs new <name of documentation> Sample Host the documentation locally: $ mkdocs serve The serve will build (meaning generate the html and js files) and run a local host.","title":"2 Create site"},{"location":"tutorials/development/use-md-with-mkdocs-to-document/#3-change-the-style-optional","text":"Add a custom css file and change the mkdocs.yml file","title":"3 Change the style (optional)"},{"location":"tutorials/development/use-md-with-mkdocs-to-document/#4-build-the-site","text":"Before you deploy you need to build the site so that it can generate html and javascript sites. $ mkdocs build The html and javascript files will be generated in a site folder as shown below. It is the site folder that should be deployd to the preferred host. Site","title":"4 Build the site"},{"location":"tutorials/development/use-md-with-mkdocs-to-document/#5-deploy-the-site","text":"There are several ways to host the site. Below describes how to deploy to a GitHub Page and Azure Static Web App. Note that this is done manually using command line interface (CLI). The next step is to integrate this in a CI/CD pipeline. Note : The markdown files should be kept in a versioncontrol repository like GitHub or Azure DevOps to keep track of history .","title":"5 Deploy the site"},{"location":"tutorials/development/use-md-with-mkdocs-to-document/#41-deploy-to-a-github-page","text":"The simplest way is to deploy to a GitHub Page . You need to have an existing git repository. Create a repository in GitHub and follow the guideling on GitHub to initialize the local repository with the GitHub repository. $ mkdocs gh-deploy The deploy will generate a new branch called gh-pages and deploy to a GitHub site. Sample in mkdocs-learning","title":"4.1 Deploy to a GitHub Page"},{"location":"tutorials/development/use-md-with-mkdocs-to-document/#42-deploy-to-azure-static-web-app","text":"Howto deploy files to Azure Static Web App is explained here","title":"4.2 Deploy to Azure Static Web App"}]}